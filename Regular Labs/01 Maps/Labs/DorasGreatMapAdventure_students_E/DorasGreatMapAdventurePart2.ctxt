#BlueJ class context
comment0.params=type
comment0.target=DorasGreatMapAdventurePart2(String)
comment0.text=\nIf\ client\ creates\ a\ "hash"\ DorasGreatMapAdventure,\ key\ will\ have\ a\ reasonable\ hashCode,\ the\ associated\ set\ contains\ Objects\nIf\ client\ creates\ a\ "tree"\ DorasGreatMapAdventure,\ key\ will\ implement\ Comparable\ interface\ as\ required\ by\ the\ TreeMap()\ class,\nthe\ associated\ set\ contains\ Objects\n\n
comment1.params=boots
comment1.target=DorasGreatMapAdventurePart2<Integer,String>\ mapUnion(DorasGreatMapAdventure<Integer,String>)
comment1.text=returns\ a\ DorasGreatMapAdventure\ implemented\ with\ a\ HashMap\nThis\ allows\ me\ to\ take\ the\ union\ of\ DorasGreatMapAdventure\ implemented\ with\ TreeMaps\ and\ HashMap\n\nthe\ returned\ Map\ will\ contains\ the\ keys\ that\ are\ in\ either\ Map.\nFor\ keys\ that\ are\ in\ both\ Maps,\ the\ associated\ Sets\ will\ be\ a\ union\ of\ the\ two\ sets\n\n
comment2.params=backpack
comment2.target=DorasGreatMapAdventurePart2<Integer,String>\ mapIntersection(DorasGreatMapAdventure<Integer,String>)
comment2.text=returns\ a\ DorasGreatMapAdventure\ implemented\ with\ a\ HashMap\nThis\ allows\ me\ to\ take\ the\ intersection\ of\ DorasGreatMapAdventure\ implemented\ with\ TreeMaps\ and\ HashMap\n\nthe\ returned\ Map\ will\ contains\ the\ keys\ that\ are\ only\ in\ both\ Maps.\nthe\ associated\ Sets\ will\ be\ an\ intersection\ of\ the\ two\ sets\n\n
comment3.params=swiper
comment3.target=DorasGreatMapAdventurePart2<Integer,String>\ mapDifference(DorasGreatMapAdventure<Integer,String>)
comment3.text=returns\ a\ DorasGreatMapAdventure\ implemented\ with\ a\ HashMap\nThis\ allows\ me\ to\ take\ the\ difference\ of\ DorasGreatMapAdventure\ implemented\ with\ TreeMaps\ and\ HashMap\n\nthe\ returned\ Map\ will\ contains\ the\ keys\ that\ are\ in\ this.iAmTheMap.\nfor\ each\ key\ in\ this.iAmTheMap,\ if\ that\ key\ is\ in\ swiper,\nthe\ associated\ set\ is\ the\ set\ difference\ of\ this.iAmTheMap\ -\ swiper.iAmTheMap\n\n
comment4.params=backpack
comment4.target=boolean\ isSubmapOf(DorasGreatMapAdventure<Integer,String>)
comment4.text=\nreturns\ true\ iff\nfor\ each\ key\ in\ this.iAmTheMap,\ backpack.iAmTheMap\ contains\ the\ same\ key\nthis.iAmTheMap.get(key)\ is\ a\ subset\ of\ backpack.iAmTheMap.get(k)\nnote\:\ \ this\ allows\ both\ Maps\ to\ be\ equal\notherwise\ return\ false\n\n
comment5.params=s
comment5.target=boolean\ isProperSubmapOf(DorasGreatMapAdventure<Integer,String>)
comment5.text=\nreturns\ true\ iff\nfor\ each\ key\ in\ this.iAmTheMap,\ backpack.iAmTheMap\ contains\ the\ same\ key\nthis.iAmTheMap.get(key)\ is\ a\ proper\ subset\ of\ backpack.iAmTheMap.get(key)\ for\ every\ key\ in\ iAmTheMap.keySet()\nnote\:\ \ this\ implies\ that\ equal\ sets\ are\ NOT\ properSubsets.\notherwise\ return\ false\n\n
comment6.target=void\ clear()
comment6.text=\nRemoves\ all\ mappings\ from\ this\ map\npostCondition\:\ \ keySet().size()\ \=\=\ 0\n\n
comment7.params=isa
comment7.target=void\ clearKey(K)
comment7.text=\nthe\ set\ associated\ with\ key\ isa\ is\ emptied\npostCondition\:\ \ getMap().get(isa).size()\ \=\=\ 0\nif\ isa\ is\ not\ a\ key\n-\ do\ not\ throw\ an\ exception,\ that\ is\ exit\ the\ method\ gracefully\n\n
comment8.target=int\ numMappings()
comment8.text=\nreturns\ the\ number\ key-value\ mapping\ in\ iAmTheMap\n\n
numComments=9
